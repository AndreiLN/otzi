<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-32) 2015.2.1 (Build 705U)" ts="2017-08-07 17:39:58">
<Project name="otzi" LastModified="2017-08-07 08:58:45.469193">
  <Items>
    <ProjectItem name="otzi.core" type="PKG"></ProjectItem>
    <ProjectItem name="otzi.axe" type="CLS"></ProjectItem>
    <ProjectItem name="otzi.template.Base" type="CLS"></ProjectItem>
    <ProjectItem name="otzi.template.tests" type="PKG"></ProjectItem>
  </Items>
</Project>


<Class name="otzi.axe">
<Super>otzi.core.axeBuilder</Super>
<TimeChanged>64243,37998.884215</TimeChanged>
<TimeCreated>64218,53787.580736</TimeCreated>

<Method name="Generate">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Quit:..NewNameSpace=1 ##class(otzi.core.Project).New(..Project, ..Modules, ..Test, ..WebApp)
	Quit ##class(otzi.core.Project).Create(..NameSpace, ..Package, ..Project, ..Modules, ..Test, ..WebApp, ..Options)
]]></Implementation>
</Method>

<Method name="g">
<Description>
Generate</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Quit ..Generate()
	;Quit $$$OK
]]></Implementation>
</Method>

<Method name="Pow">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCommands:%String=""</FormalSpec>
<Implementation><![CDATA[	Quit ..Prompt(pCommands)
]]></Implementation>
</Method>

<Method name="Prompt">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCommands:%String=""</FormalSpec>
<Implementation><![CDATA[
	If pCommands="" {
		Write !,"otzi: no input files"
		Write !,"Usage: For basic information, try the 'help' or '?' option."
		Quit
	}
	Do ..TranslateCommands(pCommands)
]]></Implementation>
</Method>

<Method name="TranslateCommands">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCommands:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	Set tSC = $$$OK
	Try {
		/*$$$THROWONERROR(tSC, ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(pCommands, .json))		
		If json.Name = "" Throw $$$ERROR(,"No value provided for required argument 'Project Name'")
		
		D ##class(otzi.axe).Pow("ProdutoDistribuidor -nons -csp -tdd -modules Expurgo:>=1.0,Reenvio,Email:>2.0")
		
		//*/
		
		If ($Translate($Piece(pCommands,"-",1)," ","")=""){
			Throw $$$ERROR(5002, "No value provided for required argument 'Project Name'")
		}
		Write #,"COMMANDS: "_pCommands
		Set otzi=##class(otzi.axe).%New()
		Do otzi.Project($Piece(pCommands,"-",1))
		Set ptr=0,csp=0,ns="''",bs="SOAP",bo="SOAP",test=0,tdd=0,all=0,br=0,reenvio=0,expurgo="",email=""
		While $ListNext($ListFromString(pCommands,"-"),ptr,value){
			//USEFUL VARIABLES
			Set UpperValue=$ZConvert(value,"U")
			Set TranslatedValue=$Translate(UpperValue," ","")			 
			
			//No Namespace
			If (TranslatedValue="NONS")||(TranslatedValue="NONAMESPACE"){
				$$$THROWONERROR(tSC, otzi.NoNameSpace())		
			}
			
			//Namespace
			ElseIf ($Find(UpperValue,"NS")'=0)||($Find(UpperValue,"NAMESPACE")'=0){
				Set name=$Translate($Piece(UpperValue," ",2)," ","")
				$$$THROWONERROR(tSC, otzi.NameSpace(name))		
				Set ns=name
				Kill name
			}
			
			//NOTEST
			ElseIf (TranslatedValue="NOTEST"){
				$$$THROWONERROR(tSC, otzi.NoTest())		
				Set test=0
			}
			
			//TEST
			ElseIf (TranslatedValue="TEST"){
				$$$THROWONERROR(tSC, otzi.Test())		
				Set test=1
			}
			
			//ALL
			ElseIf (TranslatedValue="ALL"){
				$$$THROWONERROR(tSC, otzi.all())		
				Set all=1
			}
			
			//CSP
			ElseIf (TranslatedValue="CSP"){
				$$$THROWONERROR(tSC, otzi.csp())		
				Set csp=1
			}
			
			//BROKER
			ElseIf (TranslatedValue="BROKER"){
				$$$THROWONERROR(tSC, otzi.broker())		
				Set br=1
			}
			
			//TDD
			ElseIf (TranslatedValue="TDD"){
				//Do method TDD
				Set tdd=1
			}
			
			//BS Type
			ElseIf ($Find(UpperValue,"BS")'=0){
				Set type=$Translate($Piece(UpperValue," ",2)," ","")
				If (type="S")||(type="SOAP"){
					set bs="SOAP"
					//Do method SOAP
				}
				ElseIf (type="R")||(type="REST"){
					set bs="REST"
					//Do method REST
				}
				Kill type
			}
			
			//BO Type
			ElseIf ($Find(UpperValue,"BO")'=0){
				Set type=$Translate($Piece(UpperValue," ",2)," ","")
				If (type="S")||(type="SOAP"){
					set bo="SOAP"
					//Do method SOAP
				}
				ElseIf (type="R")||(type="REST"){
					set bo="REST"
					//Do method REST
				}
				Kill type
			}
			
			//Modules
			ElseIf ($Find(UpperValue,"MODULES")'=0){
				Set params=$Translate($Piece(UpperValue," ",2)," ","")
				
				//Reenvio
				If ($Find(params,"REENVIO")'=0){
					Set reenvio=1
				}
				
				//Expurgo
				If ($Find(params,"EXPURGO")'=0){
					Set:($Find($Piece(params,",",1),"EXPURGO")'=0) expurgo=$Piece(($Piece(params,",",1)),":",2)
					Set:($Find($Piece(params,",",2),"EXPURGO")'=0) expurgo=$Piece(($Piece(params,",",2)),":",2)
					Set:($Find($Piece(params,",",3),"EXPURGO")'=0) expurgo=$Piece(($Piece(params,",",3)),":",2)
				}
				
				//Email
				If ($Find(params,"EMAIL")'=0){
					Set:($Find($Piece(params,",",1),"EMAIL")'=0) email=$Piece(($Piece(params,",",1)),":",2)
					Set:($Find($Piece(params,",",2),"EMAIL")'=0) email=$Piece(($Piece(params,",",2)),":",2)
					Set:($Find($Piece(params,",",3),"EMAIL")'=0) email=$Piece(($Piece(params,",",3)),":",2)
				}
				
				Kill params
			}
			
		}

		Write !!,"Project: "_otzi.Project
		Write !,"NameSpace: "_ns
		Write !,"Test: "_test
		Write !,"ALL: "_all
		Write !,"CSP: "_csp
		Write !,"BROKER: "_br
		Write !,"TDD: "_tdd
		Write !,"BS: "_bs
		Write !,"BO: "_bo
		Write !,"MODULES: Reenvio:"_reenvio_"   -   Expurgo:"_expurgo_"   -   Email:"_email 
		
		Kill UpperValue,TranslatedValue,ptr,count,all,bo,br,bs,csp,email,expurgo,name,ns,params,reenvio,tdd,type,test
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
		Write !, $System.Status.GetErrorText(tSC)
	}
]]></Implementation>
</Method>
</Class>


<Class name="otzi.core.Generator">
<TimeChanged>64502,62283.358763</TimeChanged>
<TimeCreated>64226,59793.803971</TimeCreated>

<Method name="Validate">
<Description>
Validate the ClassMethod Project arguments</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>args...</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set:$Get(args(1))="" tSC = $$$ERROR(6404, "Namespace")
		Throw:$$$ISERR(tSC)
		Set:$Get(args(2))="" tSC = $$$ERROR(6404, "Template")
		Throw:$$$ISERR(tSC)
		Set:$ClassName(args(2))'="otzi.core.vo.Template" tSC = $$$ERROR(6405,"Template","otzi.core.vo.Template")
		Throw:$$$ISERR(tSC)
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="Project">
<Description>
Load all classes from a template project and create</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>args...</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = ..Validate(args...)
	Quit:$$$ISERR(tSC) tSC

	
	Set pNamespace = args(1),
	    pTemplate = args(2),
	    pPackage = $Get(args(3)),
	    pProject = $Get(args(4)),
	    pIgnore = $Get(args(5))
	Set:pIgnore="" pIgnore = 1
	
	Try {
		For k=1:1:pTemplate.Classes.Count() {
			
			$$$THROWONERROR(tSC, ..Class(pNamespace, pTemplate.Classes.GetAt(k), pPackage, pProject, pIgnore))
		}
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="Class">
<ClassMethod>1</ClassMethod>
<FormalSpec>args...</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ns=$Namespace, tSC = $$$OK
	/*
	 pNamespace As %String, 
	 pTemplate As otzi.core.vo.Template.Class, 
	 pPackage As %String = "", 
	 pProject As %String = "", 
	 pIgnore As %Boolean = 1
	*/
	Set pNamespace = args(1),
	    pTemplate = $Get(args(2)),
	    pPackage = $Get(args(3)),
	    pProject = $Get(args(4)),
	    pIgnore = $Get(args(5))
	Set:pIgnore="" pIgnore = 1
	
	#Dim pTemplate As otzi.core.vo.Template.Class
	
	Try {
		Set:pTemplate="" tSC = $$$ERROR(6404, "Template Class")
		Throw:$$$ISERR(tSC)
		
		Set className = pTemplate.Name, newClass = ""
		
		If $Extract(className,1,1)="." {
			Set className = ""
			Set:pPackage'="" $List(className,*+1) = pPackage
			Set:pProject'="" $List(className,*+1) = pProject
			
			Set className = $ListToString(className,".")_pTemplate.Name
		} 
		
		Set className = ..Replace(pPackage, pProject, className)
		Set superClass = ..Replace(pPackage, pProject, pTemplate.Super)

		ZNSpace pNamespace
			Set newClass = ##class(%Dictionary.ClassDefinition).%OpenId(className)
		ZNSpace ns
		
		Set:((newClass'="")&&(pIgnore=0)) tSC = $$$ERROR(5805)
		If newClass="" {
			W !,className,!

			ZNSpace pNamespace
			Set newClass = ##class(%Dictionary.ClassDefinition).%New()
			Set newClass.Name = className
			Set newClass.Super = superClass
			Set newClass.ProcedureBlock = 1
			Do newClass.%Save()
			
			If ((pTemplate.Name["utl.Instalador")||(pTemplate.Name["Install")) {
				// If this was an install class (used to create web aplication)
				// then add a projection
				Set projection = ##class(%Dictionary.ProjectionDefinition).%New()
				Set projection.Name = "Reference"
				Set projection.Type = "Instalador"
				Do newClass.Projections.Insert(projection)
				Do newClass.%Save()
			}
			
			// Properties
			For p=1:1:pTemplate.Properties.Count() {
				ZNSpace ns
					$$$THROWONERROR(tSC, ..AddProperty(pNamespace, pPackage, pProject, pTemplate.Methods.GetAt(p), .property))
				ZNSpace pNamespace
				
				$$$THROWONERROR(tSC, newClass.Properties.Insert(property) )
				
				
				// Create simple Index
				If pTemplate.Properties.GetAt(p).Index'="" {
					ZNSpace ns
						$$$THROWONERROR(tSC, ..AddSimpleIndex(pNamespace, pTemplate.Properties.GetAt(p).Name, .indice))
					ZNSpace pNamespace
					
					$$$THROWONERROR(tSC, newClass.Indices.Insert(indice) )
				}
			}
			$$$THROWONERROR(tSC, newClass.%Save() )
			
			// Methods
			For m=1:1:pTemplate.Methods.Count() {
				
				ZNSpace ns
					$$$THROWONERROR(tSC, ..AddMethod(pNamespace, pPackage, pProject, pTemplate.Methods.GetAt(m), .method))
				ZNSpace pNamespace
				
				$$$THROWONERROR(tSC, newClass.Methods.Insert(method) )
			}
			$$$THROWONERROR(tSC, newClass.%Save() )
			
			
			// Parameters
			For p=1:1:pTemplate.Parameters.Count() {
				Set parameter = ##class(%Dictionary.ParameterDefinition).%New()
				
				ZNSpace ns
					Set parameter.Name = ..Replace(pPackage, pProject, pTemplate.Parameters.GetAt(p).Name)
					Set:pTemplate.Parameters.GetAt(p).Value'="" parameter.Default = ..Replace(pPackage, pProject, pTemplate.Parameters.GetAt(p).Value)
				ZNSpace pNamespace
				
				Set parameter.Expression = ""
				
				$$$THROWONERROR(tSC, newClass.Parameters.Insert(parameter) )
			}
			$$$THROWONERROR(tSC, newClass.%Save() )
			
			
			// Routes
			Set routes = ""
			If pTemplate.Routes.Count() > 0 {
				For p=1:1:pTemplate.Routes.Count() {
					ZNSpace ns
						Set routes = routes _ "<Route Url=""/"_ ..Replace(pPackage, pProject, pTemplate.Routes.GetAt(p).Name )
						Set routes = routes _ """ Method="""_..Replace(pPackage, pProject, pTemplate.Routes.GetAt(p).Value) _""" Call="""_..Replace(pPackage, pProject, pTemplate.Routes.GetAt(p).Call) _"""/>"
					ZNSpace pNamespace
				}
			
				Set routes = "<Routes>" _ routes _ "</Routes>"
				Set route = ##class(%Dictionary.XDataDefinition).%New()
				Set route.Name = "UrlMap"
				Do route.Data.Write(routes)
				$$$THROWONERROR(tSC, newClass.XDatas.Insert(route))
			}
			$$$THROWONERROR(tSC, newClass.%Save() )
			
			If pTemplate.Bpl.Read() '="" {
				Do pTemplate.Bpl.Rewind()
				Set xdata = ##class(%Dictionary.XDataDefinition).%New()
				Set xdata.Name = "BPL"
				Set xdata.Description = "BPL Definition"
				
				ZNSpace ns
					Do xdata.Data.Write(..Replace(pPackage, pProject, pTemplate.Bpl.Read()))		
				ZNSpace pNamespace
				
				$$$THROWONERROR(tSC, newClass.XDatas.Insert(xdata))
			}
			$$$THROWONERROR(tSC, newClass.%Save() )
			
			If ((pTemplate.Page.Style.Read()'="")||(pTemplate.Page.Content.Read()'="")) {
				
				Set content = ##class(%GlobalCharacterStream).%New(), 
					page = $ListBuild("Style","Contents")
					
				For p=1:1:$ListLength(page) {
					Do:p=1 content.CopyFrom(pTemplate.Page.Style)
					Do:p=2 content.CopyFrom(pTemplate.Page.Content)
					Do content.Rewind()
					If content.Read()'="" {
						Do content.Rewind()
						Set xdata = ##class(%Dictionary.XDataDefinition).%New()
						Set xdata.Name = $List(page, p)
						;Set xdata.Description = ""
						
						ZNSpace ns
							Do xdata.Data.Write(..Replace(pPackage, pProject, content.Read()))		
						ZNSpace pNamespace
					
						$$$THROWONERROR(tSC, newClass.XDatas.Insert(xdata))
					}
				}
				$$$THROWONERROR(tSC, newClass.%Save() )
			}
			
			Do:((newClass.Name'["Instalador")||(newClass.Name'["Install")) $system.OBJ.Compile(newClass.Name)
		}

	} Catch tException {
		Set:$$$ISOK(tSC) tSC=tException.AsStatus()
	}
	
	ZNSpace ns
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="Replace">
<Description><![CDATA[
The <b>Replace</b> method add the package and project names to classname]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPackage:%String="",pProject:%String="",pParam:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set output = pParam
	Set lowText = $ZConvert(pProject,"l")
	Set camelText = $Extract($ZConvert(lowText,"U"),1,1) _ $Extract($ZConvert(lowText,"l"),2,*)
	
	Set pkgPrj = ""
	Set:pPackage'="" $List(pkgPrj,*+1) = pPackage
	Set:pProject'="" $List(pkgPrj,*+1) = pProject
	Set pkgPrj = $ListToString(pkgPrj,".")
	
	Set output = $Replace(output,"#{package.project}",pkgPrj)
	Set output = $Replace(output,"#{project}",pProject)
	Set output = $Replace(output,"#{Camelcase.project}", camelText)
	Set output = $Replace(output,"#{camel.project}", camelText)
	Set output = $Replace(output,"#{package}", pPackage)
	Set output = $Replace(output,"#{database.packagename}", $Replace(pPackage,".","_"))
	Quit output
]]></Implementation>
</Method>

<Method name="AddMethod">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String="",pPackage:%String="",pProject:%String="",pTemplateMethod:otzi.core.vo.Template.Method,*pMethod:%Dictionary.MethodDefinition</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ns=$Namespace, tSC = $$$OK
	Try {
		ZNSpace pNamespace
		
		Set pMethod = ##class(%Dictionary.MethodDefinition).%New()
		Set pMethod.ClassMethod = 0, parameter = ""
		
		Set:pTemplateMethod.Type="Class" pMethod.ClassMethod = 1
		Set:pTemplateMethod.Type="Client" pMethod.ClientMethod = 1
		
		If pTemplateMethod.Type = "Zen" {
			Set pMethod.ClassMethod = 1, 
				pMethod.ZenMethod = 1
		}
		
		If pTemplateMethod.Type = "Javascript" {
			Set pMethod.ClientMethod = 1, 
				pMethod.Language = "javascript"
		}
		
		Set:pTemplateMethod.Parameters'="" parameter = pTemplateMethod.Parameters
		
		ZNSpace ns
			Set pMethod.Name = ..Replace(pPackage, pProject, pTemplateMethod.Name)
			Set:pTemplateMethod.Value'="" pMethod.ReturnType = ..Replace(pPackage, pProject, pTemplateMethod.Value)
			Do pMethod.Implementation.Write( ..Replace(pPackage, pProject, pTemplateMethod.Implementation.Read()) )
			Set:parameter'="" pMethod.FormalSpec = ..Replace(pPackage, pProject, parameter)
		ZNSpace pNamespace
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	ZNSpace ns
	Quit tSC
]]></Implementation>
</Method>

<Method name="AddProperty">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String="",pPackage:%String="",pProject:%String="",pTemplateProperty:otzi.core.vo.Template.Property,*pProperty:%Dictionary.PropertyDefinition</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ns=$Namespace, tSC = $$$OK
	Try {
		ZNSpace pNamespace
		Set pProperty = ##class(%Dictionary.PropertyDefinition).%New()
		
		ZNSpace ns
			Set pProperty.Name = ..Replace(pPackage, pProject, pTemplateProperty.Name)
			Set pProperty.Type = ..Replace(pPackage, pProject, pTemplateProperty.Value)
		ZNSpace pNamespace
		
		Set:pTemplateProperty.List'="" pProperty.Collection = "list"
		If (pTemplateProperty.Parameters.Count() > 0) {
			For param=1:1:pTemplateProperty.Parameters.Count() {
				#Dim parameter As otzi.core.vo.Parameter
				Set parameter = pTemplateProperty.Parameters.GetAt(param)
				
				Set paramValue ="",paramName =""
				ZNSpace ns
					Set paramValue = ..Replace(pPackage, pProject, parameter.Value)
					Set paramName = ..Replace(pPackage, pProject, parameter.Name)
				ZNSpace pNamespace
				Do pProperty.Parameters.SetAt(paramValue, paramName)
			}
		}
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	ZNSpace ns
	Quit tSC
]]></Implementation>
</Method>

<Method name="AddSimpleIndex">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String="",pPropertyName:%String,*pIndex:%Dictionary.IndexDefinition</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ns=$Namespace, tSC = $$$OK
	Try {
		ZNSpace pNamespace
		Set indice = ##class(%Dictionary.IndexDefinition).%New()
		Set indice.Name = "Idx"_pPropertyName
		Set indice.Properties = pPropertyName
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	ZNSpace ns
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="otzi.core.Import">
<TimeChanged>64244,49525.244315</TimeChanged>
<TimeCreated>64232,53194.216058</TimeCreated>

<Method name="Package2Template">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTemplateName:%String,pNameSpace:%String,pPackage:%String,args...</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try	{
		$$$THROWONERROR(tSC, ..ClassFromPackage(pNameSpace, pPackage, .Classes))
		$$$THROWONERROR(tSC, ..CreateTemplate(pNameSpace, Classes, .prj))
		
		#Dim prj As otzi.core.vo.Template
		Set prj.Version = "0.1"
		Set:$Get(args(1))'="" prj.Version = args(1)
		
		Do ..objToXML(prj,.pOutput)
		
		Set match = ##class(%Regex.Matcher).%New("[^a-zA-Z0-9]", pTemplateName _ prj.Version)
		$$$THROWONERROR(tSC, ..Add(match.ReplaceAll(""), .pOutput))
		
	}
	Catch tException
	{
		Set:'$$$ISERR(tSC) tSC=tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="objToXML">
<ClassMethod>1</ClassMethod>
<FormalSpec>pObjeto:otzi.core.vo.Engine.Module,*pOutput:%CharacterStream</FormalSpec>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try	{
		Set tEscritorXML = ##class(%XML.Writer).%New()
		Set tEscritorXML.Charset ="UTF-8"
		Set tSC = tEscritorXML.OutputToStream(.pOutput)
		Throw:$$$ISERR(tSC)
		Set tSC = tEscritorXML.RootObject(pObjeto)
		Throw:$$$ISERR(tSC)
	}
	Catch tException
	{
		Set:'$$$ISERR(tSC) tSC=tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ClassFromPackage">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameSpace:%String,pPackage:%String,*pClassNames</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK, pClassNames = "", ns=$Namespace
	Try {
		Set statement = ##class(%SQL.Statement).%New()
		Set tSC = statement.%Prepare("SELECT Name FROM %Dictionary.ClassDefinition " _
			" Where Name %Startswith ? and Deployed = 0 "_
			" Order By Name")
			
		ZNSpace pNameSpace
			Set tRS = statement.%Execute(pPackage)
			
			While tRS.%Next() {
				Set $List(pClassNames, *+1) = tRS.%Get("Name")
			}
		ZNSpace ns
		
		Set pClassNames = $ListToString(pClassNames, ",")
	}
	Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="CreateTemplate">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameSpace:%String,pClassNames:%String,*pOutput:otzi.core.vo.Template</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,  classes = $ListFromString(pClassNames,","), ns=$Namespace
	Try {
		
		Set prj = ##class(otzi.core.vo.Template).%New()
		
		For k=1:1:$ListLength(classes) {
			Set clss = ""
			W $List(classes,k),!
			ZNSpace pNameSpace
				Set clss = ##class(%Dictionary.ClassDefinition).%OpenId($List(classes,k))
			ZNSpace ns
			
			Set otziClass = ##class(otzi.core.vo.Template.Class).%New()
			Set otziClass.Name = clss.Name
			S otziClass.Super = clss.Super
			
			W "Methods "_clss.Methods.Count()_"...",!
			For i=1:1:clss.Methods.Count() {
				Set otziMeth = ##class(otzi.core.vo.Template.Method).%New()
				#dim meth As %Dictionary.MethodDefinition
				Set meth = clss.Methods.GetAt(i)
				W !,meth.Name,!
				Set:meth.ClientMethod otziMeth.Type = "Client"
				Set:meth.ClassMethod otziMeth.Type = "Class"
				Set:meth.Language'="" otziMeth.Language = meth.Language
				
				Set otziMeth.Name = meth.Name
				Set otziMeth.Value = meth.ReturnType
				Do otziMeth.Implementation.Write( meth.Implementation.Read() )
				S otziMeth.Parameters = meth.FormalSpec
				Do otziClass.Methods.Insert(otziMeth)
			}
			
			W "Properties...",!
			For i=1:1:clss.Properties.Count() {
				Set otziProp = ##class(otzi.core.vo.Template.Property).%New()
				#dim prop As %Dictionary.PropertyDefinition
				Set prop = clss.Properties.GetAt(i)
				Set otziProp.Name = prop.Name
				Set otziProp.Value = prop.Type
				Set:prop.Collection="list" otziProp.List = prop.Collection
				// TODO: indices
				
				While prop.Parameters.GetNext(.key) {
					Set param = ##class(otzi.core.vo.Template.Parameter).%New()
					Set param.Name = key
					Set param.Value = prop.Parameters.GetAt(key)
					Do otziProp.Parameters.Insert(param)
				}
				
				Do otziClass.Properties.Insert(otziProp)

			}
			
			W "Pages...",!
			Set page = ##class(otzi.core.vo.Template.Page).%New(), bpage = ""
			I clss.XDatas.Count() > 0 {
				For i=1:1:clss.XDatas.Count() {
					#Dim xdta As %Dictionary.XDataDefinition
					Set xdta = clss.XDatas.GetAt(i)
					W xdta.Name,!
					Continue:((xdta.Name="Style")||(xdta.Name="Contents"))
					Do:xdta.Name="Contents" page.Content.CopyFrom(xdta.Data)
					Do:xdta.Name="Style" page.Style.CopyFrom(xdta.Data)
					Set bpage = 1
				}
				Set:bpage=1 otziClass.Page = page
			}
			/*
			F i=1:1:clss.Parameters.Count() {
				S otziParam = ##class(otzi.core.vo.Template.Parameter).%New()
				#dim param As %Dictionary.ParameterDefinition
				S param = clss.Parameters.GetAt(i)
				S otziParam.Name = param.Name
				S otziParam.Value = param.Default
				D otziClass.Parameters.Insert(param)
			}
			*/
			Do prj.Classes.Insert(otziClass)
		}
		
		Set pOutput = prj
	}

	Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="Add">
<ClassMethod>1</ClassMethod>
<FormalSpec>pName:%String,pXML:%CharacterStream</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	S tSC = $$$OK
	Try{
		Set newClass = ##class(%Dictionary.ClassDefinition).%New()
		Set newClass.Name = "otzi.template." _ pName
		Set newClass.ProcedureBlock = 1
		
		Set template = ##class(%Dictionary.XDataDefinition).%New()
		Set template.Name = "gen"
		Do template.Data.CopyFrom(pXML)
		Do newClass.XDatas.Insert(template)
		Do newClass.%Save()
	}
	Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Q tSC
]]></Implementation>
</Method>
</Class>


<Class name="otzi.core.Module">
<Super>%RegisteredObject</Super>
<TimeChanged>64243,31193.676917</TimeChanged>
<TimeCreated>64218,52963.306657</TimeCreated>

<Property name="Engine">
<Type>otzi.core.vo.Engine</Type>
<Internal>1</Internal>
</Property>

<Property name="ModuleVersion">
<Type>%String</Type>
<InitialExpression>"^0"</InitialExpression>
</Property>

<Property name="ModuleName">
<Type>%String</Type>
</Property>

<Property name="NameSpace">
<Type>%String</Type>
</Property>

<Property name="Package">
<Type>%String</Type>
</Property>

<Property name="Project">
<Type>%String</Type>
</Property>

<Property name="Options">
<Type>%String</Type>
</Property>

<Method name="Execute">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC, ..Find(..ModuleName, ..ModuleVersion, .module))
		$$$THROWONERROR(tSC, ..Internal(..NameSpace, ..Package, ..Project, module, ..Options))
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="Find">
<FormalSpec>pModuleName:%String,pVersion:%String="^0",*pModule:otzi.core.vo.Engine.Module</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK, pModule = ##class(otzi.core.vo.Engine.Module).%New()
	Set:pVersion="" pVersion = "^0"
	Try {
		Set max = ..Engine.Modules.Count(), curr = 0
		
		While (curr < max){
			Set curr = $Increment(curr)
			#Dim module As otzi.core.vo.Engine.Module
			Set module = ..Engine.Modules.GetAt(curr)
			If ((module.Name = pModuleName)&&(..IsThisVersion(pVersion, module.Version))) {
				Set curr = max + 1, pModule = module
			}
		}
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="IsThisVersion">
<FormalSpec>pVersion:%String,pModuleVersion:%String,*tSC:%Status</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK, output = $$$NO
	Try {
		Set matcher = ##class(%Regex.Matcher).%New("[0-9\.]")
		Set matcher.Text = pVersion, 
		    condition = matcher.ReplaceAll(""), 
		    version = $Replace(pVersion,condition,""), 
		    matcher.Text = pModuleVersion, 
		    moduleVersion = $Replace(pModuleVersion,matcher.ReplaceAll(""),"")
		
		Set condition = $Replace(condition," ","")
		Set:((condition="")&&(version = moduleVersion)) output = $$$YES
		Set:(((condition=">=")||(condition="~")||(condition="^")||(condition="u")||
			(condition="up")||(condition="&gt;="))&&(version <= moduleVersion)) output = $$$YES
		Set:(((condition="<=")||(condition="&lt;=")||(condition="d")||
			(condition="down"))&&(version >= moduleVersion)) output = $$$YES
		Set:(((condition=">")||(condition="&gt;")||
			(condition="+"))&&(version < moduleVersion)) output = $$$YES
		Set:(((condition="<")||(condition="&lt;")||
			(condition="-"))&&(version > moduleVersion)) output = $$$YES
		
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit output
]]></Implementation>
</Method>

<Method name="Internal">
<FormalSpec><![CDATA[pNameSpace:%String,pPackage:%String="",pProject:%String="",&pModule:otzi.core.vo.Engine.Module,pOptions:%String=""]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK, ns = $Namespace, generator = "", pOptions = $ListFromString(pOptions,",")
	Try {
		Set:pModule.Name="" tSC = $$$ERROR(5002,"Not Found")
		Throw:$$$ISERR(tSC)
		
		For k=1:1:pModule.Dependencies.Count() {
			#Dim dependence as otzi.core.vo.Engine.Dependence
			Set dependence = pModule.Dependencies.GetAt(k)
			$$$THROWONERROR(tSC, ..Find(dependence.Module, dependence.Version, .dependenceModule))
			$$$THROWONERROR(tSC, ..Internal(pNameSpace, pPackage, pProject, dependenceModule, $ListToString(pOptions,",")))
		}
		
		If ##class(otzi.core.Sys).CheckEnvironment(pNameSpace, pModule.Env) {
			Set:pModule.TemplateFile'="" tSC = ##class(otzi.template.Base).LoadTemplate(pModule.TemplateFile, .generator)
			Throw:$$$ISERR(tSC)
			
			Set:generator'="" tSC = ##class(otzi.core.Generator).Project(pNameSpace, generator, pPackage, pProject)
			Throw:$$$ISERR(tSC)
		}
		
		// Create all optional classes
		For k=1:1:pModule.Options.Count() {
			#Dim option as otzi.core.vo.Engine.Option
			Set option = pModule.Options.GetAt(k)
			
			Continue:$ListFind(pOptions,option.Name)=0
			For m=1:1:option.Module.Count() {
				$$$THROWONERROR(tSC, ..Find(option.Module.GetAt(m).Module, option.Module.GetAt(m).Version, .optional))
				$$$THROWONERROR(tSC, ..Internal(pNameSpace, pPackage, pProject, optional))
			}
		}
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="%OnNew">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set tSC = $$$OK
	$$$THROWONERROR(tSC, ..Load())
	Quit tSC
]]></Implementation>
</Method>

<Method name="Load">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		
		Set xdataID = "otzi.core.Repository||Modules"
		Set compiledXdata=##class(%Dictionary.CompiledXData).%OpenId(xdataID)
		Set tStream=compiledXdata.Data
		Throw:'$IsObject(tStream)

		Set tXMLReader = ##class(%XML.Reader).%New()
		Do tStream.Rewind()
		$$$THROWONERROR(tSC, tXMLReader.OpenStream(tStream) )
		
		Do tXMLReader.Correlate("Engine", "otzi.core.vo.Engine")
		Set tRNext = tXMLReader.Next(.pValueObject,.tSC)
		Throw:$$$ISERR(tSC)
		Set ..Engine = pValueObject
		
	} Catch tException {
		Set:'$$$ISERR(tSC) tSC=tException.AsStatus()
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="Options">
<FormalSpec>pOptions:%String=""</FormalSpec>
<ReturnType>otzi.core.Module</ReturnType>
<Implementation><![CDATA[
	Set:pOptions'="" ..Options = pOptions
	Quit $This
]]></Implementation>
</Method>

<Method name="Project">
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>otzi.core.Module</ReturnType>
<Implementation><![CDATA[
	Set ..Project = pName
	Quit $This
]]></Implementation>
</Method>

<Method name="Package">
<FormalSpec>pName:%String=""</FormalSpec>
<ReturnType>otzi.core.Module</ReturnType>
<Implementation><![CDATA[
	Set:pName'="" ..Package = pName
	Quit $This
]]></Implementation>
</Method>

<Method name="NameSpace">
<FormalSpec>pName:%String=""</FormalSpec>
<ReturnType>otzi.core.Module</ReturnType>
<Implementation><![CDATA[
	Set:pName'="" ..NameSpace = pName
	Quit $This
]]></Implementation>
</Method>

<Method name="Version">
<FormalSpec>pVersion:%String=""</FormalSpec>
<ReturnType>otzi.core.Module</ReturnType>
<Implementation><![CDATA[
	Set:pVersion'="" ..ModuleVersion = pVersion
	Quit $This
]]></Implementation>
</Method>

<Method name="Name">
<FormalSpec>pModuleName:%String</FormalSpec>
<ReturnType>otzi.core.Module</ReturnType>
<Implementation><![CDATA[
	Set ..ModuleName = pModuleName
	Quit $This
]]></Implementation>
</Method>

<Method name="generator">
<FormalSpec>pModuleName:%String</FormalSpec>
<ReturnType>otzi.core.Module</ReturnType>
<Implementation><![CDATA[	Quit ..Name(pModuleName)
]]></Implementation>
</Method>

<Method name="Module">
<FormalSpec>pModuleName:%String</FormalSpec>
<ReturnType>otzi.core.Module</ReturnType>
<Implementation><![CDATA[	Quit ..Name(pModuleName)
]]></Implementation>
</Method>
</Class>




<Class name="otzi.core.Project">
<TimeChanged>64243,38052.831269</TimeChanged>
<TimeCreated>64218,52496.914944</TimeCreated>

<Method name="Create">
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace:%String,Package:%String="",Project:%String,pModules:%ListOfDataTypes="",Test:%Boolean=1,Broker:%Boolean=0,pOptions:%String=""</FormalSpec>
<Implementation><![CDATA[
	Set ns=$Namespace, tSC = $$$OK, key="", mapping = ##class(%ListOfDataTypes).%New()
	Try {
		Set webApps = 1
		Set:Broker webApps = -1
		
		// Loading All Modules Engines
		For key=1:1:pModules.Count() {
			Set flavor = pModules.GetAt(key), flavor = $ListFromString(flavor,":")
			
			Set modules = ##class(otzi.core.Module).%New(
			 	).NameSpace(NameSpace
				).Package(Package
				).Project(Project
				).Module($List(flavor,1)
				).Options(pOptions
				)
			
			//Do:$List(flavor,2)'="" modules.Version($List(flavor,2))
			
			$$$THROWONERROR(tSC, modules.Execute())
			//TODO: $$$THROWONERROR(tSC, mapping.Insert(flavor))
		}
		
		Set:Test tSC = ..CreateTestEnv(NameSpace, mapping)
		Throw:$$$ISERR(tSC)
	}
	Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
		Write $System.Status.GetErrorText(tSC)
	}
	ZNSpace ns
	Quit tSC
]]></Implementation>
</Method>

<Method name="New">
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String,pModules:%ListOfDataTypes="",Test:%Boolean=1,Broker:%Boolean=0,pOptions:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ns=$Namespace, tSC = $$$OK
	Try {
		Set webApps = 1
		Set:Broker webApps = -1
		$$$THROWONERROR(tSC, ..Namespace(Name,webApps))
		ZNSpace ns
		$$$THROWONERROR(tSC, ..Create(Name, ,Name, pModules, Test, Broker, pOptions))
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
		Write $System.Status.GetErrorText(tSC)
	}
	ZNSpace ns
	Quit tSC
]]></Implementation>
</Method>

<Method name="CreateTestEnv">
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String,Packages:%ListOfDataTypes=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ns=$Namespace, tSC = $$$OK
	Try {
		ZNSpace "%SYS"
			Set:$Get(^SYS("Security","CSP","AllowPrefix","/csp/user/","%UnitTest."))'=1 ^SYS("Security","CSP","AllowPrefix","/csp/user/","%UnitTest.")=1
		ZNSpace ns
		Set tddNameSpace = "TDD_"_Name
		Do:'##class(%SYS.Namespace).Exists(tddNameSpace) ..Namespace(tddNameSpace)
		
		ZNSpace "%SYS"	
			I Packages'="" {
				While Packages.GetNext(.k) { $$$THROWONERROR(tSC, ..AddMapPackage(tddNameSpace,Packages.GetAt(k),Name)) }
			}
		
		ZNSpace ns
		
		// Tdd Modules
		S testModules = ##class(otzi.core.Module).%New()
		$$$THROWONERROR(tSC, testModules.Execute("FrameworkTest",,tddNameSpace))
		
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="AddMapPackage">
<ClassMethod>1</ClassMethod>
<FormalSpec>args...</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ns=$Namespace, tSC = $$$OK
	Try {
		Set Namespace= args(1)
		Set pack = args(2)
		Set nsProperties("Database") = args(3)
		
		ZNSpace "%SYS"
			Set tSC = ##Class(Config.MapPackages).Create(Namespace,pack,.nsProperties)
		ZNSpace ns	
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="Namespace">
<Description><![CDATA[
 Creates namespace, database, default webapplication (csp and REST) with name, well <b>Name</b>.<br>
 <b>Name</b> - you're strongly encouraged to use only combinations of
latin alphabet (a-z, A-Z) and number (0-9) characters here.
<b>WebApps</b> - create webapps. 0 - none, 1 - default csp, 2 - broker, -1 - all<br>
do ##class(Utils.NS).Create("")]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String,WebApps:%Integer=0</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
 Set tSC = $$$OK
 ZNSpace "%SYS"
 Try {
	 Set LowName = $ZConvert(Name,"L")
	 
	 //Create directories
	 Set Path = ##class(%File).ManagerDirectory() _ Name
	 Set tSC = ##class(%File).CreateDirectory(Path)
	 Return:$$$ISERR(tSC) tSC
	 Set PathWEB = ##class(%File).NormalizeDirectory(##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory()) _ "CSP") _ Name
	 Set tSC = ##class(%File).CreateDirectory(PathWEB)
	 Return:$$$ISERR(tSC) tSC
	  
	 // Create DataBase File
	 Set tSC=##Class(SYS.Database).CreateDatabase(Path)
	 Return:$$$ISERR(tSC) tSC
	  
	 // Mount database to Cache
	 Set Properties("Directory")=Path
	 Set Properties("MountRequired")=1
	 Set tSC=##Class(Config.Databases).Create(Name,.Properties)
	 Return:$$$ISERR(tSC) tSC
	 Set Properties("MountRequired")=1
	 Set tSC=##Class(Config.Databases).Modify(Name,.Properties)
  
	 // Create NameSpace
	 Set nsProperties("Globals") = Name
	 Set nsProperties("Library") = "CACHELIB"
	 Set nsProperties("Routines") = Name
	 Set nsProperties("SysGlobals") = "CACHESYS"
	 Set nsProperties("SysRoutines") = "CACHESYS"
	 Set nsProperties("TempGlobals") = "CACHETEMP"
	 Set tSC = ##Class(Config.Namespaces).Create(Name,.nsProperties)
	 Return:$$$ISERR(tSC) tSC
	  
	 // Create web apps
	 
	 // default
	 if ((WebApps = 1) || (WebApps = -1)) {
		 Set cspProperties("AutheEnabled") = 64
		 Set cspProperties("NameSpace") = Name
		 Set cspProperties("Path") = PathWEB
		 Set cspProperties("IsNameSpaceDefault") = 1
		 Set tSC = ##Class(Security.Applications).Create("/csp/"_LowName,.cspProperties)
		 Return:$$$ISERR(tSC) tSC
	 }
	 
	 // broker
	 if ((WebApps = 2) || (WebApps = -1)) {
		 Set cspProperties("AutheEnabled") = 64
		 Set cspProperties("NameSpace") = Name
		 Set cspProperties("DispatchClass") = "REST.Broker"
		 Set cspProperties("IsNameSpaceDefault") = 0
		 Set tSC = ##Class(Security.Applications).Create("/broker/"_LowName,.cspProperties)
		 Return:$$$ISERR(tSC) tSC
	 }
 } Catch tException {
	 Set:$$$ISOK(tSC) tSC = tException.AsStatus()
 }
  
 Quit tSC
]]></Implementation>
</Method>

<Method name="GetOriginalNamespace">
<Description>
Do ##class().GetOriginalNamespace()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Package="WebTerminal"</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set a= ##class(Subpackage.Class).%New()
	Set ns=$Namespace
	Set databasepath = ##class(%SYS.Namespace).GetPackageDest($Namespace,Package)
	Set databasepath = $Piece(databasepath,"^",2)
	ZNSpace "%SYS"
	Do ##Class(Config.Databases).DatabasesByDirectory("",databasepath,.databaselist)
	Set database = $ListGet(databaselist,1)
	Set statement = ##class(%SQL.Statement).%New()
	Set status = statement.%PrepareClassQuery("Config.Namespaces","List")
	If $$$ISERR(status) { Do $system.OBJ.DisplayError(status) }
	Set resultset = statement.%Execute()
	While resultset.%Next() {
		If resultset.%Get("Routines")=database {
			Kill resultset
			ZNSpace ns
			Return resultset.%Get("Namespace")
		}
	}
	ZNSpace ns
	Return ns
]]></Implementation>
</Method>
</Class>


<Class name="otzi.core.Repository">
<TimeChanged>64244,50848.068121</TimeChanged>
<TimeCreated>64236,51776.29545</TimeCreated>

<XData name="Modules">
<Data><![CDATA[
<Engine>
<Modules>
<Module Name="test" Version="0.1">
<TemplateFile>otzi.template.test</TemplateFile>
<Options>
<Option Name="opt">
<Module Module="optionalTest"></Module>
</Option>
</Options>
</Module>
<Module Name="optionalTest" Version="2.9">
<TemplateFile>otzi.template.optionaltest</TemplateFile>
</Module>
<Module Name="FrameworkTest" Version="1.0" Keywords="tdd,cos,atomic">
<Dependencies>
 <Dependence Module="atomic_ens" Version=">=0.1"></Dependence>
 <Dependence Module="autotest_suite" Version=">=0.1"></Dependence>
</Dependencies>
</Module>
<Module Name="atomic_ens" Version="0.1" Env="ENS">
<Dependencies>
<Dependence Module="atomic_cos" Version=">=0.1"></Dependence>
</Dependencies>
<TemplateFile>otzi.template.tests.atomic.ens01</TemplateFile>
</Module>
<Module Name="atomic_cos" Version="0.1">
<TemplateFile>otzi.template.tests.atomic.cos01</TemplateFile>
</Module>
<Module Name="autotest_suite" Version="0.1">
<TemplateFile>otzi.template.tests.autoTestSuite01</TemplateFile>
</Module>
<Module Name="ensdasa" Version="0.1">
<Dependencies>
 <Dependence Module="ensdasabase" Version=">=0.1"></Dependence>
</Dependencies>
<Options>
<Option Name="cr">
<Module Module="core"></Module>
</Option>
<Option Name="bsrest">
<Module Module="bsrest"></Module>
</Option>
<Option Name="borest">
<Module Module="borest"></Module>
</Option>
<Option Name="bssoap">
<Module Module="bssoap"></Module>
</Option>
<Option Name="bosoap">
<Module Module="bosoap"></Module>
</Option>
<Option Name="exp">
<Module Module="expurgo"></Module>
</Option>
<Option Name="ree">
<Module Module="reenvio"></Module>
</Option>
</Options>
</Module>
<Module Name="ensdasabase" Version="1.0">
<TemplateFile>otzi.template.ens.dasa</TemplateFile>
</Module>
<Module Name="bsrest" Version="0.1">
<TemplateFile>otzi.template.ens.dasa.bsrest01</TemplateFile>
</Module>
<Module Name="bssoap" Version="0.1">
<TemplateFile>otzi.template.ens.dasa.bssoap01</TemplateFile>
</Module>
<Module Name="borest" Version="0.1">
<TemplateFile>otzi.template.ens.dasa.borest01</TemplateFile>
</Module>
<Module Name="bosoap" Version="0.1">
<TemplateFile>otzi.template.ens.dasa.bosoap01</TemplateFile>
</Module>
<Module Name="expurgo" Version="0.1">
<TemplateFile>otzi.template.ens.dasa.expurgo</TemplateFile>
</Module>
<Module Name="reenvio" Version="0.1">
<TemplateFile>otzi.template.ens.dasa.reenvio</TemplateFile>
</Module>
<Module Name="core" Version="0.1">
<TemplateFile>otzi.template.ens.dasa.dasacore01</TemplateFile>
</Module>

<Module Name="fbp" Version="0.2">
<TemplateFile>otzi.template.fbp02</TemplateFile>
</Module>

<Module Name="dadbasic" Version="0.1">
<TemplateFile>otzi.template.fbp.page.dadbasica</TemplateFile>
</Module>
</Modules>
</Engine>
]]></Data>
</XData>
</Class>


<Class name="otzi.core.Sys">
<TimeChanged>64239,33277.315988</TimeChanged>
<TimeCreated>64233,48675.284491</TimeCreated>

<Method name="CheckEnvironment">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameSpace:%String,pEnv:%String,*tSC:%Status</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set pEnv=$TRANSLATE($ZCONVERT(pEnv,"U")," ","")
	Set tSC = $$$OK, Env = $$$NO
	Try {
		Set:pEnv="" Env = $$$YES
		Set:((pEnv="ENS")&&($Find(..Ensemble(pNameSpace),"Ensemble"))) Env = $$$YES
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit Env
]]></Implementation>
</Method>

<Method name="WhereAmI">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameSpace:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set product = ..Ensemble(pNameSpace) _ $System.Version.Format(5)
	Set:$Get(product)="" product = $System.Version.Format(3)
	Quit product
]]></Implementation>
</Method>

<Method name="Ensemble">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameSpace:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK, sys = "", ns=$Namespace
	Try {
		Set statement = ##class(%SQL.Statement).%New()
		Set tSC = statement.%Prepare("SELECT ID FROM %Dictionary.ClassDefinition Where Name = 'Ens.Director'")
			
		ZNSpace pNameSpace
			Set tRS = statement.%Execute()
			
			While tRS.%Next() {
				Set:tRS.%Get("ID")'="" sys = "Ensemble" _ $System.Version.Format(5)
			}
		ZNSpace ns
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit sys
]]></Implementation>
</Method>

<Method name="About">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..Version() _ " created by Henry Hamon 2016"
]]></Implementation>
</Method>

<Method name="Version">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "version 0.1a "
]]></Implementation>
</Method>
</Class>


<Class name="otzi.core.axeBuilder">
<Super>%RegisteredObject</Super>
<TimeChanged>64502,63137.24273</TimeChanged>
<TimeCreated>64218,53787.580736</TimeCreated>

<Property name="Test">
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="NewNameSpace">
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="Project">
<Type>%String</Type>
</Property>

<Property name="Package">
<Type>%String</Type>
</Property>

<Property name="NameSpace">
<Type>%String</Type>
</Property>

<Property name="Modules">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="Options">
<Type>%String</Type>
</Property>

<Property name="WebApp">
<Type>%Integer</Type>
<Parameter name="DISPLAYLIST" value="None,CSP,ALL,Broker"/>
<Parameter name="VALUELIST" value="0,1,2,-1"/>
</Property>

<Method name="Project">
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[
	Set ..Project = pName
	Quit $This
]]></Implementation>
</Method>

<Method name="NewProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[
	Set axe = ..%New().Project(pName)
	Quit axe
]]></Implementation>
</Method>

<Method name="p">
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[	Quit ..Project(pName)
]]></Implementation>
</Method>

<Method name="Package">
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[
	Set ..Package = pName
	Quit $This
]]></Implementation>
</Method>

<Method name="pkg">
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[	Quit ..Package(pName)
]]></Implementation>
</Method>

<Method name="Options">
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[
	Set ..Options = pName
	Quit $This
]]></Implementation>
</Method>

<Method name="opt">
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[	Quit ..Options(pName)
]]></Implementation>
</Method>

<Method name="NameSpace">
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[
	Set ..NameSpace = pName
	Quit $This
]]></Implementation>
</Method>

<Method name="ns">
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[	Quit ..NameSpace(pName)
]]></Implementation>
</Method>

<Method name="NoNameSpace">
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[
	Set ..NewNameSpace = 0
	Quit $This
]]></Implementation>
</Method>

<Method name="nons">
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[	Quit ..NoNameSpace()
]]></Implementation>
</Method>

<Method name="Modules">
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[
	Set modules = $ListFromString(pName,",")
	For k=1:1:$ListLength(modules){
		Do ..Modules.Insert($List(modules,k))
	}
	
	Quit $This
]]></Implementation>
</Method>

<Method name="Module">
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[	Quit ..Modules(pName)
]]></Implementation>
</Method>

<Method name="m">
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[	Quit ..Modules(pName)
]]></Implementation>
</Method>

<Method name="tdd">
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[	Quit ..Test()
]]></Implementation>
</Method>

<Method name="Test">
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[
	Set ..Test = 1
	Quit $This
]]></Implementation>
</Method>

<Method name="NoTest">
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[
	Set ..Test = 0
	Quit $This
]]></Implementation>
</Method>

<Method name="nt">
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[	Quit ..NoTest()
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// --- Web Application Options

]]></Content>
</UDLText>

<Method name="WebApplication">
<FormalSpec>WebApps:%Integer</FormalSpec>
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[
	Set ..WebApp = WebApps
	Quit $This
]]></Implementation>
</Method>

<Method name="none">
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[	Quit ..WebApplication(0)
]]></Implementation>
</Method>

<Method name="csp">
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[	Quit ..WebApplication(1)
]]></Implementation>
</Method>

<Method name="all">
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[	Quit ..WebApplication(-1)
]]></Implementation>
</Method>

<Method name="broker">
<ReturnType>otzi.axe</ReturnType>
<Implementation><![CDATA[	Quit ..WebApplication(2)
]]></Implementation>
</Method>

<Method name="h">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[ 	Quit ..help()
]]></Implementation>
</Method>

<Method name="help">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Write !!,"Otzi: caché scaffolding tool",!
	Write !, "Project or p to define the project name",!
	Write "Package or pkg to define the package name",!
	Write "",!
	Write "",!
]]></Implementation>
</Method>

<Method name="Scaffold">
<Description>
--- Scaffolding</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC, ##class(otzi.core.Project).Create(..NameSpace, ..Package, ..Project, ..Modules, ..Test, ..WebApp, ..Options ))
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="run">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..Scaffold()
]]></Implementation>
</Method>
</Class>


<Class name="otzi.core.vo.Engine.Dependence">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>64238,35322.221277</TimeChanged>
<TimeCreated>64232,33393.75751</TimeCreated>

<Property name="Module">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Property name="Version">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>DependenceState</State>
<StreamLocation>^otzi.core.vo.EnBD12.DependenceS</StreamLocation>
<Data name="DependenceState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>Module</Value>
</Value>
<Value name="2">
<Value>Version</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="otzi.core.vo.Engine.Module">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>64238,35459.60155</TimeChanged>
<TimeCreated>64232,33009.73567</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Property name="Version">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Property name="Options">
<Type>otzi.core.vo.Engine.Option</Type>
<Collection>list</Collection>
<Parameter name="XMLPROJECTION" value="COLLECTION"/>
</Property>

<Property name="Arguments">
<Type>%String</Type>
<Collection>list</Collection>
<Parameter name="XMLPROJECTION" value="COLLECTION"/>
</Property>

<Property name="Dependencies">
<Type>otzi.core.vo.Engine.Dependence</Type>
<Collection>list</Collection>
<Parameter name="XMLPROJECTION" value="COLLECTION"/>
</Property>

<Property name="Keywords">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Property name="TemplateFile">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Property name="Description">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Property name="Env">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>ModuleState</State>
<StreamLocation>^otzi.core.vo.Engine.ModuleS</StreamLocation>
<Data name="ModuleState">
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Version</Value>
</Value>
<Value name="3">
<Value>Options</Value>
</Value>
<Value name="4">
<Value>Arguments</Value>
</Value>
<Value name="5">
<Value>Dependencies</Value>
</Value>
<Value name="6">
<Value>Keywords</Value>
</Value>
<Value name="7">
<Value>TemplateFile</Value>
</Value>
<Value name="8">
<Value>Description</Value>
</Value>
<Value name="9">
<Value>Env</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="otzi.core.vo.Engine.Option">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>64238,55746.318249</TimeChanged>
<TimeCreated>64238,34156.77292</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Property Type As %String(DISPLAYLIST = ",Name,Mechanism,Tecnology", VALUELIST = ",Name,Mechanism,Tecnology", XMLPROJECTION = "ATTRIBUTE");

]]></Content>
</UDLText>

<Property name="Name">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Property name="Module">
<Type>otzi.core.vo.Engine.Dependence</Type>
<Collection>list</Collection>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Property name="Message">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>OptionState</State>
<StreamLocation>^otzi.core.vo.Engine.OptionS</StreamLocation>
<Data name="OptionState">
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Module</Value>
</Value>
<Value name="3">
<Value>Message</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="otzi.core.vo.Engine">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>64238,35380.216311</TimeChanged>
<TimeCreated>64232,32518.16771</TimeCreated>

<Property name="Modules">
<Type>otzi.core.vo.Engine.Module</Type>
<Collection>list</Collection>
<Parameter name="XMLPROJECTION" value="COLLECTION"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>EngineState</State>
<StreamLocation>^otzi.core.vo.EngineS</StreamLocation>
<Data name="EngineState">
<Value name="1">
<Value>Modules</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="otzi.core.vo.Template.Class">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>64244,50295.808475</TimeChanged>
<TimeCreated>64107,41225.97577</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Property name="Mechanism">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Property name="Super">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Property name="Bpl">
<Type>%GlobalCharacterStream</Type>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Property name="Parameters">
<Type>otzi.core.vo.Template.Parameter</Type>
<Collection>list</Collection>
<Parameter name="XMLPROJECTION" value="COLLECTION"/>
</Property>

<Property name="Properties">
<Type>otzi.core.vo.Template.Property</Type>
<Collection>list</Collection>
<Parameter name="XMLPROJECTION" value="COLLECTION"/>
</Property>

<Property name="Methods">
<Type>otzi.core.vo.Template.Method</Type>
<Collection>list</Collection>
<Parameter name="XMLPROJECTION" value="COLLECTION"/>
</Property>

<Property name="Routes">
<Type>otzi.core.vo.Template.Route</Type>
<Collection>list</Collection>
<Parameter name="XMLPROJECTION" value="COLLECTION"/>
</Property>

<Property name="Page">
<Type>otzi.core.vo.Template.Page</Type>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>ClassState</State>
<StreamLocation>^otzi.core.vo.Template.ClassS</StreamLocation>
<Data name="ClassState">
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Mechanism</Value>
</Value>
<Value name="3">
<Value>Tecnology</Value>
</Value>
<Value name="4">
<Value>Super</Value>
</Value>
<Value name="5">
<Value>Bpl</Value>
</Value>
<Value name="6">
<Value>Parameters</Value>
</Value>
<Value name="7">
<Value>Properties</Value>
</Value>
<Value name="8">
<Value>Methods</Value>
</Value>
<Value name="9">
<Value>Routes</Value>
</Value>
<Value name="10">
<Value>Page</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="otzi.core.vo.Template.Method">
<Super>otzi.core.vo.Template.NameValue</Super>
<TimeChanged>64499,60678.246658</TimeChanged>
<TimeCreated>64107,41046.670249</TimeCreated>

<Property name="Type">
<Type>%String</Type>
<InitialExpression>"Instance"</InitialExpression>
<Parameter name="DISPLAYLIST" value=",Class,Instance,Client,Zen,Javascript"/>
<Parameter name="VALUELIST" value=",Class,Instance,Client,Zen,Javascript"/>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Property name="Language">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Property name="Parameters">
<Type>%String</Type>
<Parameter name="MAXLEN" value="2000"/>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Property name="Implementation">
<Type>%GlobalCharacterStream</Type>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="NameValueState">
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Value</Value>
</Value>
<Value name="3">
<Value>Type</Value>
</Value>
<Value name="4">
<Value>Language</Value>
</Value>
<Value name="5">
<Value>Parameters</Value>
</Value>
<Value name="6">
<Value>Implementation</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="otzi.core.vo.Template.NameValue">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>64243,54767.184593</TimeChanged>
<TimeCreated>64107,40848.96522</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Property name="Value">
<Type>%String</Type>
<Parameter name="MAXLEN" value="2000"/>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>NameValueState</State>
<StreamLocation>^otzi.core.vo.TemEB0C.NameValueS</StreamLocation>
<Data name="NameValueState">
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Value</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="otzi.core.vo.Template.Page">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>64243,62112.698433</TimeChanged>
<TimeCreated>64243,62093.965753</TimeCreated>

<Property name="Style">
<Type>%GlobalCharacterStream</Type>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Property name="Content">
<Type>%GlobalCharacterStream</Type>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>PageState</State>
<StreamLocation>^otzi.core.vo.Template.PageS</StreamLocation>
<Data name="PageState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>Style</Value>
</Value>
<Value name="2">
<Value>Content</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="otzi.core.vo.Template.Parameter">
<Super>otzi.core.vo.Template.NameValue</Super>
<TimeChanged>64238,51724.691491</TimeChanged>
<TimeCreated>64107,40888.203163</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="otzi.core.vo.Template.Property">
<Super>otzi.core.vo.Template.NameValue</Super>
<TimeChanged>64238,51808.018429</TimeChanged>
<TimeCreated>64107,40824.993829</TimeCreated>

<Property name="Index">
<Type>%String</Type>
</Property>

<Property name="List">
<Type>%String</Type>
</Property>

<Property name="Parameters">
<Type>otzi.core.vo.Template.Parameter</Type>
<Collection>list</Collection>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="NameValueState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Value</Value>
</Value>
<Value name="3">
<Value>Index</Value>
</Value>
<Value name="4">
<Value>List</Value>
</Value>
<Value name="5">
<Value>Parameters</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="otzi.core.vo.Template.Route">
<Super>otzi.core.vo.Template.NameValue</Super>
<TimeChanged>64238,51987.873617</TimeChanged>
<TimeCreated>64107,40964.923337</TimeCreated>

<Property name="Url">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Property name="Call">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="NameValueState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Value</Value>
</Value>
<Value name="3">
<Value>Url</Value>
</Value>
<Value name="4">
<Value>Call</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="otzi.core.vo.Template">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>64238,52098.497039</TimeChanged>
<TimeCreated>64107,41286.983152</TimeCreated>

<Property name="Classes">
<Type>otzi.core.vo.Template.Class</Type>
<Collection>list</Collection>
<Parameter name="XMLPROJECTION" value="COLLECTION"/>
</Property>

<Property name="Version">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Property name="Description">
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>TemplateState</State>
<StreamLocation>^otzi.core.vo.TemplateS</StreamLocation>
<Data name="TemplateState">
<Value name="1">
<Value>Classes</Value>
</Value>
<Value name="2">
<Value>Version</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="otzi.template.Base">
<TimeChanged>64238,55512.039296</TimeChanged>
<TimeCreated>64218,52476.68071</TimeCreated>

<Method name="LoadTemplate">
<Description>
Load an XData Template to a Value Object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pTemplateName:%String,&pValueObject:otzi.core.vo.Template]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set xdataID = pTemplateName _ "||gen"
		Set compiledXdata=##class(%Dictionary.CompiledXData).%OpenId(xdataID)
		Set tStream=compiledXdata.Data
		Throw:'$IsObject(tStream)

		Set tXMLReader = ##class(%XML.Reader).%New()
		Do tStream.Rewind()
		$$$THROWONERROR(tSC, tXMLReader.OpenStream(tStream) )

		Do tXMLReader.Correlate("Template", "otzi.core.vo.Template")
		Set tRNext = tXMLReader.Next(.pValueObject,.tSC)
		Throw:$$$ISERR(tSC)
	} Catch tException {
		Set:'$$$ISERR(tSC) tSC=tException.AsStatus()
	}
	
	Quit tSC
]]></Implementation>
</Method>
</Class>




<Class name="otzi.template.tests.atomic.cos01">
<TimeChanged>64238,55476.905413</TimeChanged>
<TimeCreated>64222,60642.556056</TimeCreated>

<XData name="gen">
<Data><![CDATA[
<Template>
	<Classes>
		<Class>
			<Name>Atomic.UnitTest.Stub</Name>
			<Properties>
				<Property>
					<Name>arguments</Name>
					<Value>%ArrayOfObjects</Value>
				</Property>
				<Property>
					<Name>invocationCounts</Name>
					<Value>%ArrayOfDataTypes</Value>
				</Property>
				<Property>
					<Name>returnValues</Name>
					<Value>%ArrayOfObjects</Value>
				</Property>
			</Properties>
			<Methods>
				<Method>
					<Name>%DispatchMethod</Name>
					<Implementation>
						<![CDATA[	Do ..Invocation(Method)
	Set arguments = ##class(%ListOfObjects).%New()
	
	For i = 1:1:$Get(Args, 0)
	{
		Set value = $Get(Args(i), "")
		If $IsObject(value)
		{
			Do arguments.Insert(value)
		}
		Else
		{
			Set wrapper = ##class(Atomic.UnitTest.DataTypeWrapper).%New()
			Do wrapper.SetValue(value)
			Do arguments.Insert(wrapper)
		}
	}
	
	Do ..arguments.SetAt(arguments, Method_..invocationCounts.GetAt(Method))
	
	Quit:$IsObject(..returnValues.GetAt(Method)) ..returnValues.GetAt(Method).GetValue()	
	Quit ""
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>%OnNew</Name>
					<Value>%Status</Value>
					<Implementation>
						<![CDATA[	Set ..invocationCounts = ##class(%ArrayOfDataTypes).%New()
	Set ..arguments = ##class(%ArrayOfObjects).%New()
	Set ..returnValues = ##class(%ArrayOfObjects).%New()
	
	Quit $$$OK
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>ArgsForMethod</Name>
					<Value>%ListOfObjects</Value>
					<Implementation>
						<![CDATA[	Set args = ..arguments.GetAt(Method_Count)
	Quit:args'="" args	
	Quit ""
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>FirstArgument</Name>
					<Value>%RegisteredObject</Value>
					<Implementation>
						<![CDATA[	Set args = ..arguments.GetAt(Method_Count)
	Quit:args'="" args.GetAt(1)	
	Quit ""
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Invocation</Name>
					<Implementation>
						<![CDATA[	Set invocationCount = ..invocationCounts.GetAt(name)
	Set invocationCount = invocationCount + 1
	Do ..invocationCounts.SetAt(invocationCount, name)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>InvocationCount</Name>
					<Value>%Integer</Value>
					<Implementation>
						<![CDATA[	Set count = ..invocationCounts.GetAt(Method)
	Set:count="" count = 0
	Quit count
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Stub</Name>
					<Implementation>
						<![CDATA[	Set wrapper = ##class(Atomic.UnitTest.DataTypeWrapper).%New()
	Do wrapper.SetValue(ReturnValue)
	Do ..returnValues.SetAt(wrapper, Method)
]]]]><![CDATA[>
					</Implementation>
				</Method>
			</Methods>
		</Class>
		<Class>
			<Name>Atomic.UnitTest.TestSuite</Name>
			<Methods>
				<Method>
					<Name>ExportTest</Name>
					<Value>%Status</Value>
					<Implementation>
						<![CDATA[	Quit $System.OBJ.ExportPackage(..Package(),..TempFileName())
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>GetTempTestXmlFileName</Name>
					<Implementation>
						<![CDATA[	Do ..GetTempTestXmlPathAndFileName(.testXmlRoot, .filename)
	Quit filename
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>GetTempTestXmlPathAndFileName</Name>
					<Implementation>
						<![CDATA[	Set testXmlMatcher = "\w+.\.\w+"	
	Set matcher=##class(%Regex.Matcher).%New(testXmlMatcher) 
	
	Set tempXmlPathAndFileName = ..TempFileName()
	Set matcher.Text = tempXmlPathAndFileName
	While matcher.Locate() {
		Set pFilename = matcher.Group
	}
	Set pPath = $Piece(tempXmlPathAndFileName,pFilename,1)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>GetTestCount</Name>
					<Value>%Integer</Value>
					<Implementation>
						<![CDATA[	Set index = ""

	While $Order(^|$ZNSpace|UnitTestLog(index))
	{
		Set index = $Order(^|$ZNSpace|UnitTestLog(index))
	}
	
	Set:index="" index=0
	Quit index
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>GetTheLastFolderFromPath</Name>
					<Implementation>
						<![CDATA[	Set matcher = ##class(%Regex.Matcher).%New("[^\\]+(?=\\[^\\]+$)")
	Set matcher.Text = ..TempFileName()
	Do matcher.Locate() 
	Quit matcher.Group
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Only</Name>
					<Value>%Status</Value>
					<Implementation>
						<![CDATA[	Set:pMethod'="" testspec = testspec _ ":" _ pMethod
	Quit ..RunTest(testspec)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Package</Name>
					<Value>%String</Value>
					<Implementation />
				</Method>
				<Method>
					<Name>ResultReport</Name>
					<Value>%Status</Value>
					<Implementation>
						<![CDATA[	Set tSC = $$$OK
	Try {
		Set pTestSuite= $Order(^|$ZNSpace|UnitTest.Result(pPrevious,""))
		Set pReport = "", pFailureCount = 0
		Set count = (pLast - pPrevious) + 1
		Set currentSession = pPrevious
		For k=1:1:count {
			Set class = ""
			For {
				Set class = $Order(^|$ZNSpace|UnitTest.Result(currentSession, pTestSuite, class))
				Quit:class=""
				Set methods = "", classResults = ""
				For {
					Set methods = $Order(^|$ZNSpace|UnitTest.Result(currentSession, pTestSuite, class, methods))
					Quit:methods=""
					Set asserts = "", methodResult = ""
					For {
						Set asserts = $Order(^|$ZNSpace|UnitTest.Result(currentSession, pTestSuite, class, methods,asserts))
						Quit:asserts=""
						Set result = ^|$ZNSpace|UnitTest.Result(currentSession, pTestSuite, class, methods,asserts)
						Set temp = "."
						If $List(result,1)=0 {
							Set temp = "F"_$Char(10,13)_$List(result,3)_$Char(10,13)
							Set pFailureCount = $Increment(pFailureCount)
						}
						
						Set $List(methodResult,*+1)=temp
						Kill temp					
					}
					Set $List(classResults,*+1)=methods
					Set $List(classResults,*+1)=methodResult
				
				}
			}
			Set $List(pReport,*+1) = class
			Set $List(pReport,*+1) = classResults
			
			Set currentSession = $Increment(currentSession)
		}
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Run</Name>
					<Implementation>
						<![CDATA[	Quit ..RunTests()
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>RunTest</Name>
					<Value>%Status</Value>
					<Implementation>
						<![CDATA[	Do:$Get(^UnitTestRoot)="" ..SetUnitTestRoot()
	Set package = ..Package()
	Set:package'="" package = package _ "."
	Set spec = testspec
	Set:'$Find(spec,package) spec = package _ spec
	Set suite = ..GetTheLastFolderFromPath() _":"_ spec 
	
	Quit ##class(%UnitTest.Manager).RunTest(suite, "/noload/norecursive/nodelete")
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>RunTests</Name>
					<Value>%Status</Value>
					<Implementation>
						<![CDATA[	Do ..SetUnitTestRoot()
	Kill:..#DESTROYTESTLOGS=1 ^|$ZNSpace|UnitTestLog
	Set tSC = ..ExportTest()
	Quit:$$$ISERR(tSC) tSC
	
	Set tests = ..Tests()
	Quit:$ListLength(tests)=0 $$$OK
	
	Set failureCount = 0	
	Set previousIndex = $Order(^UnitTest.Result(""),-1)
	
	For i = 1:1:$ListLength(tests) {
		Do ..RunTest($ListGet(tests, i))
		
		Set testCount = ..GetTestCount()
		
	}

	//Set lastIndex = $Order(^UnitTest.Result(""),-1)

	//Set tSC = ..ResultReport(previousIndex,lastIndex,.report,.failureCount)
	//S ^logger = report

	If failureCount > 0
	{
		Quit $$$ERR(failureCount_" Test(s) Failed!")
	}
	
	Quit $$$OK
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>SetUnitTestRoot</Name>
					<Implementation>
						<![CDATA[	Do ..GetTempTestXmlPathAndFileName(.path, .filename)
	Set path = $Replace(path, ..GetTheLastFolderFromPath()_"\", "")
	Set ^UnitTestRoot = path
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>TempFileName</Name>
					<Value>%String</Value>
					<Implementation>
						<![CDATA[	Quit "C:\temp\"_  $ZDate($Horolog,8)_"_tests.xml"
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Tests</Name>
					<Implementation>
						<![CDATA[	Do $system.OBJ.GetPackageList(.classList, ..Package())
	Set class = ""
	Set testList = ""
	
	For
	{
		Set class = $Order(classList(class))
		Quit:class=""
		
		If $$issubclassof^%occCompile(class,"%UnitTest.TestCase")
		   && '##class(%Dictionary.ClassDefinition).%OpenId(class).Abstract
		{
			If testList = ""
			{
				Set testList = class
			}
			Else
			{
				Set testList = testList_","_class
			}
		}	
	}
	
	Quit $ListFromString(testList)
]]]]><![CDATA[>
					</Implementation>
				</Method>
			</Methods>
		</Class>
		<Class>
			<Name>Atomic.UnitTest.TestRunner</Name>
			<Methods>
				<Method>
					<Name>Run</Name>
					<Implementation>
						<![CDATA[	do ..RunTests()
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>RunTestCase</Name>
					<Implementation>
						<![CDATA[	do ##class(%UnitTest.Manager).RunTest(class_":"_class, "/noload/norecursive")
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>RunTests</Name>
					<Implementation>
						<![CDATA[	do ..RunTestCase(..%ClassName(1))
]]]]><![CDATA[>
					</Implementation>
				</Method>
			</Methods>
		</Class>
		<Class>
			<Name>Atomic.UnitTest.TestHelper</Name>
			<Methods>
				<Method>
					<Name>Above</Name>
					<Implementation>
						<![CDATA[	Set:pMessage="" pMessage = ..Message(pNum_" < ", pValue)
	Do ..True((pValue > pNum), pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>AssertMessageMapping</Name>
					<Implementation>
						<![CDATA[	Do ##class(Ens.Util.XML.Reader).ObjectsFromXData(.items, className, "MessageMap", "Ens.Config.MessageMap")
	If items="" {
		Do $$$AssertNotEquals("", items, "No mappings found")
	} ElseIf items.Size < index {
		Do $$$AssertTrue(items.Size >= index, "Could not find mapping for given index '"_index_"'")
	} Else {
		Do $$$AssertEquals(type, items.GetAt(index).MessageType)
		Do $$$AssertEquals(action, items.GetAt(index).ActionMethod)
	}
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>AssertPropertyDefinition</Name>
					<Implementation>
						<![CDATA[	Set classDefinition = ##class(%Library.ClassDefinition).%OpenId(ClassName)
	Set properties = classDefinition.Properties
	
	Set foundProperty = ""
	For i=1:1:properties.Size
	{
		Set property = properties.GetAt(i)
		Set:property.Name=PropertyName foundProperty = property
	}
	
	If foundProperty
	{
		Set gotValue = $ZObjProperty(foundProperty, Definition)
		Do $$$AssertEquals(Value, gotValue, "Value was: "_gotValue)
	}
	Else
	{
		Do $$$AssertTrue(0, "Property does not exist: "_PropertyName)
	}
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Below</Name>
					<Implementation>
						<![CDATA[	Do ..True((pValue < pNum), pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Eql</Name>
					<Implementation>
						<![CDATA[	Do ..Equal(pValue, pExpected, pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Equal</Name>
					<Implementation>
						<![CDATA[	Do ..Is(pValue, pExpected, pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Exactly</Name>
					<Implementation>
						<![CDATA[	Do ..Is(pValue, pExpected, pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Fail</Name>
					<Implementation />
				</Method>
				<Method>
					<Name>False</Name>
					<Implementation>
						<![CDATA[	Set:pMessage="" pMessage = ..Message("False",$Select(pValue="":"True",0:"True",1:"False"))
	Do $$$AssertNotTrue(pValue, pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>GreaterThan</Name>
					<Implementation>
						<![CDATA[	Do ..Above(pValue, pNum, pMessage = "")
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Is</Name>
					<Implementation>
						<![CDATA[ 	Set:pMessage="" pMessage = ..Message(pExpected,pValue)
 	Do $$$AssertEquals(pValue, pExpected, pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>LessThan</Name>
					<Implementation>
						<![CDATA[	Do ..Below(pValue, pNum, pMessage = "")
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Match</Name>
					<Implementation>
						<![CDATA[	Do ..Regex(pValue, pRegex, pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Message</Name>
					<Value>%String</Value>
					<Implementation>
						<![CDATA[	Set:pBR="" pBR = " "
	Quit "expected: " _ $Get(pExpected) _ pBR _" got: "_$Get(pGot)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Not</Name>
					<Implementation>
						<![CDATA[	Set:pMessage="" pMessage = ..Message(pExpected,pValue)
	Do $$$AssertNotEquals(pValue, pExpected, pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>NotOk</Name>
					<Implementation>
						<![CDATA[	Do $$$AssertStatusNotOK(pValue, pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Ok</Name>
					<Implementation>
						<![CDATA[	Set:((pMessage="")&&($$$ISERR(pValue))) pMessage = ..Message("$$$Ok", $System.Status.GetErrorText(pValue))
	Do $$$AssertStatusOK(pValue, pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Pass</Name>
					<Implementation />
				</Method>
				<Method>
					<Name>Regex</Name>
					<Implementation>
						<![CDATA[	Set matcher = ##class(%Regex.Matcher).%New(pRegex)
	Set matcher.Text = pValue
	
    Set:pMessage="" pMessage = ..Message(pRegex,pValue)
    
	Do ..True(matcher.Locate(), pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>True</Name>
					<Implementation>
						<![CDATA[	Set:pMessage="" pMessage = ..Message("True",$Select(pValue="":"False",0:"False",1:"True"))
	Do $$$AssertTrue(pValue, pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>Within</Name>
					<Implementation>
						<![CDATA[	Set:pMessage="" pMessage = ..Message(pMin_".."_pMax, pValue)
	Do ..True(((pValue >= pMin)&&(pValue <= pMax)),pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>startWith</Name>
					<Implementation>
						<![CDATA[	Set:pMessage="" pMessage = ..Message("start with "_pExpected, pValue)
	Set pExpected = $Replace($Replace($Replace($Replace(pExpected,"/","\/"),"+","\+"),"*","\*")," ","\s")
	Do ..Regex(pValue,"^("_pExpected_")",pMessage)
]]]]><![CDATA[>
					</Implementation>
				</Method>
			</Methods>
		</Class>
		<Class>
			<Name>Atomic.UnitTest.DataTypeWrapper</Name>
			<Properties>
				<Property>
					<Name>value</Name>
				</Property>
			</Properties>
			<Methods>
				<Method>
					<Name>GetValue</Name>
					<Implementation>
						<![CDATA[	Quit ..value
]]]]><![CDATA[>
					</Implementation>
				</Method>
				<Method>
					<Name>SetValue</Name>
					<Implementation>
						<![CDATA[	Set ..value = value
]]]]><![CDATA[>
					</Implementation>
				</Method>
			</Methods>
		</Class>
	</Classes>
</Template>
]]></Data>
</XData>
</Class>


<Class name="otzi.template.tests.atomic.ens01">
<TimeChanged>64238,55460.848404</TimeChanged>
<TimeCreated>64236,40606.787342</TimeCreated>

<XData name="generator">
<Data><![CDATA[
<Template>
<Classes>
<Class>
<Name>Atomic.UnitTest.ProductionTestHelper</Name>
<Methods>
<Method Type="Instance">
<Name>AssertDidNotRoute</Name>
<Parameters>ruleName:%String,ruleNumber:%String</Parameters>
<Implementation><![CDATA[	Do ..GetMostRecentRuleLog(ruleName, .log)
	If $Get(log) = ""
	{
		Do $$$AssertTrue(0,  "Could not find routing rule log for rule '"_ruleName_"'")
	}
	Else
	{
		Do $$$AssertNotEquals(ruleNumber, log.Reason, "Should not have executed "_ruleNumber)
	}
]]]]><![CDATA[></Implementation>
</Method>
<Method Type="Instance">
<Name>AssertGeneralSetting</Name>
<Parameters>Config:%String,Setting:%String,ExpectedValue:%String</Parameters>
<Implementation><![CDATA[		 
	Set configItem = ..GetConfigItem(Config)
	
	If configItem="" {
		Do $$$AssertNotTrue(1, "Config Item was not found")
	}
	Else {
		Do $$$AssertEquals(ExpectedValue, $zobjproperty(configItem, Setting))	
	}
]]]]><![CDATA[></Implementation>
</Method>
<Method Type="Instance">
<Name>AssertRoute</Name>
<Parameters>ruleName:%String,ruleNumber:%String,transform:%String="",operation:%String="",index:%String=1</Parameters>
<Implementation><![CDATA[	Do ..GetMostRecentRuleLog(ruleName, .log)

	If $Get(log) = ""
	{
		Do $$$AssertTrue(0, "Could not find routing rule log for rule '"_ruleName_"'")
	}
	Else
	{		
		Set rule = $LG($LISTFROMSTRING(log.Reason, ","), index)
		
		Set rules = $LISTFROMSTRING(log.ReturnValue, ";")
		Set result = $LISTFROMSTRING($LISTGET(rules, index), ":")
		
		Do $$$AssertEquals(ruleNumber, rule, "Rule Was: "_rule)
		Do $$$AssertEquals(transform, $LG(result, 3), "Transform Was: "_$LG(result, 3))
		Do $$$AssertEquals(operation, $LG(result, 2), "Operation Was: "_$LG(result, 2))
	}
]]]]><![CDATA[></Implementation>
</Method>
<Method Type="Instance">
<Name>AssertSetting</Name>
<Parameters>Config:%String,Setting:%String,ExpectedValue:%String</Parameters>
<Implementation><![CDATA[	Do ..GetSetting(..#PRODUCTION, Config, Setting, .actualValue)
	Do $$$AssertEquals(ExpectedValue, actualValue, """"_Setting_""" setting for configuration "_Config_" - Expected: "_ExpectedValue_" Was: "_actualValue)
]]]]><![CDATA[></Implementation>
</Method>
<Method Type="Instance">
<Name>CreateMessage</Name>
<Value>EnsLib.HL7.Message</Value>
<Parameters>docType:%String</Parameters>
<Implementation><![CDATA[	Set message = ##class(EnsLib.HL7.Message).%New()
	Set message.DocType = docType
	Quit message
]]]]><![CDATA[></Implementation>
</Method>
<Method Type="Instance">
<Name>EnableDisableConfig</Name>
<Value>%Status</Value>
<Parameters>configName:%String,enabled:%Boolean=1</Parameters>
<Implementation><![CDATA[	Set status = "Disabling"
	Set:enabled=1 status = "Enabling"
	
	Quit ##class(Ens.Director).EnableConfigItem(configName, enabled)
]]]]><![CDATA[></Implementation>
</Method>
<Method Type="Instance">
<Name>ForceStopProduction</Name>
<Implementation><![CDATA[	Do ..GetMacros(.Macro)
	Set s = ##class(Ens.Director).GetProductionStatus(.tProductionName,.tState)
	If $G(tState)'=Macro("eProductionStateStopped") {
		Do $$$LogMessage("Ensemble is not stopped")
		Do $$$LogMessage("Trying to stop production '"_$G(tProductionName)_"'")
		Do ##class(Ens.Director).StopProduction()
		Set s = ..WaitForState(Macro("eProductionStateStopped"))
		If 's {
			Do $$$LogMessage("Forcing production to stop")
			Set t0 = $ZH
			Do ##class(Ens.Director).StopProduction(,1)
			Hang ..#MAXWAIT-(($ZH-t0-.5)\1) // Wait remining number of seconds until ..#MAXWAIT minus 1
			Do ##class(Ens.Director).CleanProduction(1)
			Set s = ..WaitForState(Macro("eProductionStateStopped"))
		}
		Do ##class(Ens.Director).CleanProduction(1)
		Set r = $$$AssertStatusOK(s, "Verifying Ensemble is now stopped'")
		If 'r Quit 0 
	}
]]]]><![CDATA[></Implementation>
</Method>
<Method Type="Instance">
<Name>GetConfigItem</Name>
<Value>Ens.Config.Item</Value>
<Parameters>Config:%String</Parameters>
<Implementation><![CDATA[	Set production = ..#PRODUCTION
	
	&sql(SELECT ID 
		 INTO :ConfigID
		 FROM Ens_Config.Item
		 WHERE Production=:production AND Name=:Config)
		 
	Quit ##class(Ens.Config.Item).%OpenId(ConfigID)
]]]]><![CDATA[></Implementation>
</Method>
<Method Type="Instance">
<Name>GetMostRecentRuleLog</Name>
<Parameters>theRuleName:%String,*log:Ens.Rule.RuleLog</Parameters>
<Implementation><![CDATA[	&sql(SELECT TOP 1 ID INTO :Id
		 FROM Ens_Rule.RuleLog
		 WHERE RuleName = :theRuleName
		 AND Reason IS NOT NULL
		 AND ReturnValue IS NOT NULL
		 ORDER BY ID,TimeExecuted DESC)
		 	
	Quit:$Get(Id)="" "" 
	Set log = ##class(Ens.Rule.RuleLog).%OpenId(Id)
]]]]><![CDATA[></Implementation>
</Method>
<Method Type="Instance">
<Name>SendRequestTo</Name>
<Parameters>Config:%String,Request:%Persistent,Source:%String="",MaxWait=1</Parameters>
<Implementation><![CDATA[	Set configItem = ..GetConfigItem(Config)
	Set target = $zobjclassmethod(configItem.ClassName, "%New", Config)
	
	If Source'="" {
		Do Request.%Save()
		Set MessageId = Request.%Id()
		Set MessageClass = Request.%ClassName(1)
		
		Do target.SendRequestAsync(Config, Request, 0)
		
		Hang MaxWait
		
		&sql(SELECT TOP 1 ID INTO :Id
			 FROM Ens.MessageHeader
			 WHERE TargetConfigName = :Config
			 AND MessageBodyId = :MessageId
			 AND MessageBodyClassName = :MessageClass
			 ORDER BY ID DESC)
		
		Do $$$AssertStatusOK(##class(Ens.MessageHeader).NewDuplicatedMessage(.newHeader,Id,,,Source))
		Do $$$AssertStatusOK(##class(Ens.MessageHeader).ResendMessage(newHeader.MessageId()))
		
		Hang MaxWait
	}
	Else {
		Do target.SendRequestSync(Config, Request, .Response)
	}
]]]]><![CDATA[></Implementation>
</Method>
<Method Type="Instance">
<Name>TestControl</Name>
<Value>%Status</Value>
<Implementation><![CDATA[	
	Quit $$$OK
]]]]><![CDATA[></Implementation>
</Method>
</Methods>
</Class>
<Class>
<Name>Atomic.UnitTest.ContinuousIntegrationEmailAlert</Name>
<Methods>
<Method Type="Instance">
<Name>OnMessage</Name>
<Value>%Status</Value>
<Parameters>pRequest:Ens.AlertRequest,*pResponse:Ens.Response</Parameters>
<Implementation><![CDATA[	Set $ZT="Trap",tSC=$$$OK
	do {
		Set tMailMessage=##class(%Net.MailMessage).%New()
		Set tMailMessage.Subject="Test Failure alert from "_$$$SystemName_":"_pRequest.SourceConfigName
		set tMailMessage.Charset="iso-8859-1"
		Set tSC=tMailMessage.TextData.WriteLine("One or more tests failed during the test run. Click the test report link to see the failures.") 
		Set tSC=tMailMessage.TextData.WriteLine("")
		Set port=$get(^%SYS("WebServer","Port"),8972)
		Set host = "ensdev"
		Set link = "http://"_host_":"_port_"/csp/"_$ZConvert($ZNSPACE, "l")_"/%25UnitTest.Report.cls?NS="_##class(%CSP.Page).EscapeURL($znspace)
		Set tSC=tMailMessage.TextData.WriteLine(link) Quit:$$$ISERR(tSC)
		Set tSC=tMailMessage.TextData.WriteLine("")
		Set tSC=tMailMessage.TextData.WriteLine("Alert Error:")
		Set tSC=tMailMessage.TextData.WriteLine(pRequest.AlertText)
		Set tSC=..Adapter.SendMail(tMailMessage)
	} while (0)
Exit
	Quit tSC
Trap
	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]]]><![CDATA[></Implementation>
</Method>
</Methods>
</Class>
<Class>
<Name>Atomic.UnitTest.ContinuousIntegrationService</Name>
<Properties>
<Property>
<Name>Namespace</Name>
<Value>%String</Value>
</Property>
<Property>
<Name>PurgeTestLogs</Name>
<Value>%Integer</Value>
</Property><Property>
<Name>TestSuite</Name>
<Value>%String</Value>
</Property>
</Properties>
<Methods>
<Method Type="Instance">
<Name>OnProcessInput</Name>
<Value>%Status</Value>
<Parameters>pInput:%RegisteredObject,pOutput:%RegisteredObject</Parameters>
<Implementation><![CDATA[	If ..Namespace '= "" {
		zn ..Namespace
	}
	
	Do ..PurgeLogs()
	Quit $ZOBJCLASSMETHOD(..TestSuite, "RunTests")
]]]]><![CDATA[></Implementation>
</Method>
<Method Type="Instance">
<Name>PurgeLogs</Name>
<Implementation><![CDATA[	Quit:..PurgeTestLogs=-1
	
	If ##class(Atomic.UnitTest.TestSuite).GetTestCount() > ..PurgeTestLogs
	{
		Do ##class(%UnitTest.Manager).PurgeLog()
	}
]]]]><![CDATA[></Implementation>
</Method>
</Methods>
</Class>

</Classes>
</Template>
]]></Data>
</XData>
</Class>


<Class name="otzi.template.tests.autoTestSuite01">
<TimeChanged>64238,55450.219553</TimeChanged>
<TimeCreated>64236,32618.829198</TimeCreated>

<XData name="generator">
<Data><![CDATA[
<Template>
<Classes>
<Class>
<Name>Suite</Name>
<Super>Atomic.UnitTest.TestSuite</Super>
<Methods>
<Method Type="Class">
<Name>TempFileName</Name>
<Value>%String</Value>
<Implementation><![CDATA[	Quit "E:\Dados\Temporario\"_ $ZDate($Horolog,8)_"_tests.xml"]]]]><![CDATA[></Implementation>
</Method>
<Method Type="Class">
<Name>Package</Name>
<Value>%String</Value>
<Implementation><![CDATA[	Quit "#{package}"]]]]><![CDATA[></Implementation>
</Method>
</Methods>
<Parameters>
<Parameter>
<Name>DESTROYTESTLOGS</Name>
<Value>1</Value>
</Parameter>
</Parameters>
</Class>
</Classes>
</Template>
]]></Data>
</XData>
</Class>
</Export>
